name: CI/CD Pipeline with Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate build information
        id: buildinfo
        run: |
          echo "BUILD_ID=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
      - name: Install Azure CLI
        uses: azure/setup-azurecli@v3
      - name: Install additional dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl jq
      - name: Install Trivy security scanner
        run: |
          wget -qO- https://github.com/aquasecurity/trivy/releases/download/v0.48.4/trivy_0.48.4_Linux-64bit.tar.gz | tar zxvf -
          sudo mv trivy /usr/local/bin/

  build:
    name: Build, Scan, and Push Docker Image
    runs-on: ubuntu-latest
    needs: setup
    env:
      REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      BUILD_ID: ${{ env.BUILD_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to Azure Container Registry
        run: echo $REGISTRY_PASSWORD | docker login $REGISTRY_LOGIN_SERVER -u $REGISTRY_USERNAME --password-stdin
      - name: Build Docker image
        run: |
          docker build -t $REGISTRY_LOGIN_SERVER/app_image:${BUILD_ID} .
      - name: Trivy Image Scan (table)
        run: |
          trivy image --exit-code 1 --ignore-unfixed --severity CRITICAL,HIGH --format table $REGISTRY_LOGIN_SERVER/app_image:${BUILD_ID}
      - name: Trivy Image Scan (SARIF)
        run: |
          trivy image --exit-code 1 --ignore-unfixed --severity CRITICAL,HIGH --format sarif -o trivy-results.sarif $REGISTRY_LOGIN_SERVER/app_image:${BUILD_ID}
      - name: Upload Trivy SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
      - name: Push Docker image
        run: |
          docker push $REGISTRY_LOGIN_SERVER/app_image:${BUILD_ID}

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: build
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
      AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
      REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
      BUILD_ID: ${{ env.BUILD_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ env.AZURE_CLIENT_SECRET }}
      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group $AKS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME --overwrite-existing
      - name: Set image tag in deployment manifest
        run: |
          sed -i "s|app_image|$REGISTRY_LOGIN_SERVER/app_image:${BUILD_ID}|g" k8s-deployment.yaml
      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s-deployment.yaml --namespace=github_copilot_ns
      - name: Verify deployment rollout
        run: |
          kubectl rollout status deployment/app-deployment --namespace=github_copilot_ns
