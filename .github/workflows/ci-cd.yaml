name: CI/CD Pipeline with Security Scanning

on:
  push:
    branches: [main, develop] 
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build, Scan, and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      BUILD_ID: ${{ steps.buildinfo.outputs.BUILD_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate build information
        id: buildinfo
        run: |
          BUILD_ID=$(date +'%Y%m%d%H%M%S')
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_OUTPUT
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - name: Install additional dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl jq
      - name: Install Trivy security scanner
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      - name: Log in to Azure Container Registry
        run: echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ secrets.REGISTRY_LOGIN_SERVER }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/app_image:${{ steps.buildinfo.outputs.BUILD_ID }} -f javascript/Dockerfile javascript
      - name: Trivy Image Scan (table)
        run: |
          trivy image --exit-code 1 --ignore-unfixed --severity CRITICAL,HIGH --format table ${{ secrets.REGISTRY_LOGIN_SERVER }}/app_image:${{ steps.buildinfo.outputs.BUILD_ID }}
      - name: Trivy Image Scan (SARIF)
        run: |
          trivy image --exit-code 1 --ignore-unfixed --severity CRITICAL,HIGH --format sarif -o trivy-results.sarif ${{ secrets.REGISTRY_LOGIN_SERVER }}/app_image:${{ steps.buildinfo.outputs.BUILD_ID }}
      - name: Upload Trivy SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
      - name: Push Docker image
        run: |
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/app_image:${{ steps.buildinfo.outputs.BUILD_ID }}

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --overwrite-existing
      - name: Set image tag in deployment manifest
        run: |
          sed -i "s|app_image|${{ secrets.REGISTRY_LOGIN_SERVER }}/app_image:${{ needs.build.outputs.BUILD_ID }}|g" k8s-deployment.yaml
      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s-deployment.yaml --namespace=github_copilot_ns
      - name: Verify deployment rollout
        run: |
          kubectl rollout status deployment/app-deployment --namespace=github_copilot_ns
